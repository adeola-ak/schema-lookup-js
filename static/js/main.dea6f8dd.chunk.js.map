{"version":3,"sources":["components/Table/Table.js","components/Button/Button.js","assets/Sourcegraph_Logo_light.png","App.js","reportWebVitals.js","index.js"],"names":["Table","props","optionsLoaded","changesetOptions","options","allowComments","Object","entries","properties","map","key","value","description","type","group","oneOf","k","v","id","Button","className","onClick","handleClick","label","App","useState","setOptions","handleGetJson","url","axios","get","then","response","data","catch","error","console","log","apiCall","useEffect","alt","src","logo_light","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAiDeA,EA/CD,SAACC,GACX,IAAIC,EAAc,GACdC,EAAiB,GA0BrB,OAzBQF,EAAMG,SAAWH,EAAMG,QAAQC,gBAAgBH,EAAgBI,OAAOC,QAAQN,EAAMG,QAAQI,YAAYC,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KAClI,OAEA,+BACA,6BAAKD,IACL,6BAAKC,EAAMC,cACX,6BAAKD,EAAME,OACX,6BAAKF,EAAMG,eAIXb,EAAMG,SAAWH,EAAMG,QAAQW,QAAOZ,EAAmBG,OAAOC,QAAQN,EAAMG,QAAQW,OAAON,KAAI,YAAa,IAAD,mBAAVO,EAAU,KAAPC,EAAO,KAC7G,OAAOX,OAAOC,QAAQU,EAAET,YAAYC,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACtD,OACI,+BACJ,6BAAKD,IACL,6BAAKC,EAAMC,cACX,6BAAKD,EAAME,OACX,6BAAKG,cAQT,8BACI,wBAAOE,GAAG,UAAV,UACMjB,EAAMG,SACR,kCACI,4CACA,6CACA,sCACA,0CAEJ,kCACKF,EACAC,WC/BNgB,G,MATA,SAAClB,GACZ,OACI,wBAAQmB,UAAU,SAASC,QAASpB,EAAMqB,YAAcX,MAAOV,EAAMsB,MAArE,SACKtB,EAAMsB,UCLJ,MAA0B,mD,MCiD1BC,MAzCf,WAAgB,IAAD,EACiBC,qBADjB,mBACNrB,EADM,KACGsB,EADH,KAUPC,EAAgB,SAACC,IAPP,SAACA,GACfC,IACGC,IAAIF,GACHG,MAAK,SAAAC,GAAQ,OAAIN,EAAWM,EAASC,SACrCC,OAAM,SAAAC,GAAUC,QAAQC,IAAIF,MAIhCG,CAAQV,IASV,OANAW,qBAAY,WACLnC,GACHgC,QAAQC,IAAI,gBAEZ,IAGF,sBAAKjB,UAAU,MAAf,UACE,qBACFoB,IAAI,yBACJC,IAAKC,EACLtB,UAAU,SAGR,sBAAKA,UAAU,mBAAf,UACA,sGACA,cAAC,EAAD,CAAQG,MAAM,cAAcD,YAAa,kBAAMK,EAAc,6FAC7D,cAAC,EAAD,CAAQJ,MAAM,gBAAgBD,YAAa,kBAAMK,EAAc,+FAC/D,cAAC,EAAD,CAAQJ,MAAM,gBAAgBD,YAAa,kBAAMK,EAAc,+FAC/D,cAAC,EAAD,CAAQJ,MAAM,kBAAkBD,YAAa,kBAAMK,EAAc,iGACjE,cAAC,EAAD,CAAQJ,MAAM,mBAAmBD,YAAa,kBAAMK,EAAc,0GAElE,cAAC,EAAD,CAAOvB,QAASA,QChCPuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dea6f8dd.chunk.js","sourcesContent":["import \"./Table.css\"\n\nconst Table = (props) => {\n    let optionsLoaded=\"\"\n    let changesetOptions=\"\"\n        if (props.options && props.options.allowComments ) optionsLoaded = Object.entries(props.options.properties).map(([key, value]) => {\n        return (\n            \n        <tr>\n        <td>{key}</td>\n        <td>{value.description}</td> \n        <td>{value.type}</td> \n        <td>{value.group}</td>\n        </tr>\n    )})\n    //changeset data is sctructured dofferently and needs to be mapped differently. still unsure of this data\n    if (props.options && props.options.oneOf) changesetOptions = Object.entries(props.options.oneOf).map(([k, v]) => {\n        return Object.entries(v.properties).map(([key, value]) => {\n            return (\n                <tr>\n            <td>{key}</td>\n            <td>{value.description}</td> \n            <td>{value.type}</td> \n            <td>{k}</td>\n                </tr>\n            )  \n        })\n        \n    })\n\n    return (\n        <div>\n            <table id=\"options\">\n                { props.options && (\n                <thead>\n                    <td>Properties</td>\n                    <td>Description</td>\n                    <td>Type</td>\n                    <td>Group</td>\n                </thead> ) }\n                <tbody>\n                    {optionsLoaded}\n                    {changesetOptions}\n                </tbody>\n            </table>\n</div>\n    )\n    }\n\nexport default Table;","import \"./Button.css\"\n\nconst Button = (props) => {\n    return (\n        <button className=\"button\" onClick={props.handleClick}  value={props.label}>\n            {props.label}\n        </button>\n    )\n\n}\n\nexport default Button","export default __webpack_public_path__ + \"static/media/Sourcegraph_Logo_light.66076257.png\";","import {useEffect, useState} from \"react\"\nimport axios from \"axios\"\nimport Table from \"./components/Table/Table\"\nimport Button from \"./components/Button/Button\"\nimport logo_light from \"./assets/Sourcegraph_Logo_light.png\"\nimport './App.css';\n\n\nfunction App() {\n  const [options, setOptions] = useState();\n\n  const apiCall = (url) => {\n    axios\n      .get(url)\n       .then(response => setOptions(response.data))\n       .catch(error => {console.log(error);})\n      };\n    \n  const handleGetJson = (url) => {\n    apiCall(url);\n  }\n\n  useEffect ( () => {\n    if (!options) {\n      console.log(\"loading...\");\n    }\n   }, [])\n\n  return (\n    <div className=\"App\">\n      <img\n\t\t\t\talt=\"sourcegraph-logo light\"\n\t\t\t\tsrc={logo_light}\n\t\t\t\tclassName=\"logo\"\n\t\t\t/>\n\n      <div className=\"button-container\">\n      <h4>Please choose the file you wish to explore configuration options for</h4>\n      <Button label=\"Site Config\" handleClick={() => handleGetJson(\"https://raw.githubusercontent.com/sourcegraph/sourcegraph/main/schema/site.schema.json\") }/>\n      <Button label=\"GitHub Config\" handleClick={() => handleGetJson(\"https://raw.githubusercontent.com/sourcegraph/sourcegraph/main/schema/github.schema.json\") }/>\n      <Button label=\"GitLab Config\" handleClick={() => handleGetJson(\"https://raw.githubusercontent.com/sourcegraph/sourcegraph/main/schema/gitlab.schema.json\") }/>\n      <Button label=\"Gitolite Config\" handleClick={() => handleGetJson(\"https://raw.githubusercontent.com/sourcegraph/sourcegraph/main/schema/gitolite.schema.json\") }/>\n      <Button label=\"Changeset Config\" handleClick={() => handleGetJson(\"https://raw.githubusercontent.com/sourcegraph/sourcegraph/main/schema/changeset_spec.schema.json\") }/>\n      </div>\n      <Table options={options}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}